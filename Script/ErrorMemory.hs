module Script.ErrorMemory
    (
       readPrimaryErrorMemory
      ,readSecondaryErrorMemory
      ,readPrimary
      ,readSecondary
      ,readDid
      ,reset
      ,clearSecondaryErrorMemory
      ,clearPrimaryErrorMemory
      ,testHsfzMsg
      ,testHsfzMsg2
      ,testHsfzMsg3
      ,testDiagMsg
      ,testDiagMsg2
      ,testDiagMsg3
      ,test1
    )
where

import Com.DiagClient(sendData,diagPayload,Word8)
import Com.HSFZMessage
import Com.DiagMessage(hsfz2diag, DiagnosisMessage)
import DiagnosticConfig(femConfig)
import Util.Encoding

myConf = femConfig "localhost"

readSecondaryErrorMemory c = sendData c [0x22,0x20,0x00] >>= interpretDtcs
readPrimaryErrorMemory c = sendData c [0x19,0x02,0x0f] >>= interpretDtcs

readSecondary = sendData myConf [0x22,0x20,0x00] >>= interpretDtcs
readPrimary = sendData myConf [0x19,0x02,0x0f] >>= interpretDtcs

reset = sendData myConf [0x11,0x1]

readDid index = sendData myConf ([0x22,0x20] ++ [index])

interpretDtcs :: [DiagnosisMessage] -> IO ()
interpretDtcs [] = print "no valid response"
interpretDtcs (_:_:_) = print "too many responses"
interpretDtcs (x:[]) = (putStrLn . unlines . interprete . drop 2 . diagPayload) x

interprete :: [Word8] -> [String]
interprete ps = ("status availability mask:" ++ showAsBin (head ps) ++ "(" ++ showAsHex (head ps) ++ ")") :
  map showDtc xs
    where xs = zip [1..] (split4s $ tail ps)

-- dtcName :: FilePath -> IO (Maybe [B.ByteString])
-- dtcName path = do
--   h <- openFile path ReadMode
--   c <- B.hGetContents h
--   return $ match (compile pattern []) c []
--       where pattern = B.pack ".*804188.*"

showDtc :: (Int,[Word8]) -> String
showDtc (n,[a,b,c,status]) = show n ++ ".)" ++ showAsHexOneString [a,b,c] ++ " (" ++ showAsHex status ++ ")"
showDtc e = error $ "cannot show this: " ++ show e

split4s :: [Word8] -> [[Word8]]
split4s [] = []
split4s (a:b:c:d:xs) = [a,b,c,d]:split4s xs
split4s _ = error "usage split4s"

clearSecondaryErrorMemory = sendData myConf [0x31,0x01,0x0F,0x06]
clearPrimaryErrorMemory = sendData myConf [0x14,0xFF,0xFF,0xFF]

-- ActiveResponseDTCJob::ActiveResponseDTCJob(
-- 	fImplementedRequest[0] = 0x22;
-- 	fImplementedRequest[1] = 0x17;
-- 	fImplementedRequest[2] = 0x23;

testHsfzMsg = dataMessage [0x40,0xf4,0x59,0x2,0x4f,0x3,0x0,0xe,0xf,0x3,0x0,0xf,0xf,0x3,0x0,0x15,0xf,0x3,0x0,0x20,0xf,0x3,0x0,0x8e,0xf,0x3,0x0,0x8f,0xf,0x3,0x0,0xa0,0xf,0x3,0x3,0x50,0xf,0x3,0x3,0x52,0xf,0x3,0x4,0x10,0xf,0x3,0x4,0x90,0xf,0x80,0x40,0x3b,0xf,0x80,0x40,0x87,0xf,0x80,0x40,0x88,0xf,0x80,0x40,0x9c,0xf,0x80,0x40,0xa6,0xf,0x80,0x41,0x5b,0xf,0x80,0x41,0x64,0xf,0x80,0x41,0x66,0xf,0x80,0x41,0x68,0xf,0x80,0x41,0x6a,0xf,0x80,0x41,0x71,0xf,0x80,0x41,0x74,0xf,0x80,0x41,0x80,0xf,0x80,0x41,0x81,0x3,0x80,0x41,0xb6,0xf,0x80,0x41,0xb7,0xf,0x80,0x41,0xc2,0x3,0x80,0x41,0xe2,0xf,0x80,0x42,0x81,0xf,0x80,0x42,0x83,0xf,0x80,0x42,0x88,0x3,0x80,0x42,0x8a,0xf,0x80,0x42,0xcd,0xf,0x80,0x43,0x41,0xf,0x80,0x43,0x43,0xf,0x80,0x43,0x45,0xf,0x80,0x43,0x64,0xf,0x80,0x43,0x70,0xf,0x80,0x43,0x97,0x2,0x80,0x43,0x98,0xf,0x80,0x43,0x99,0xf,0xd9,0xc,0x4,0xf,0xd9,0xc,0xa,0xf,0xd9,0xc,0x10,0xf,0xd9,0xd,0x1,0xf,0xd9,0xd,0x7,0xf,0xd9,0xd,0x17,0xf,0xd9,0xd,0x26,0xf,0xd9,0xd,0x29,0xf,0xd9,0xd,0x2c,0xf,0xd9,0x14,0x8,0x3,0xd9,0x14,0x95,0x3,0xd9,0x15,0x73,0x3,0xd9,0x15,0x9f,0x3,0xd9,0x15,0xb9,0x3,0xd9,0x16,0x81,0xf,0xd9,0x16,0x92,0x3,0xd9,0x16,0xe4,0x3,0xd9,0x17,0xb,0x3,0xd9,0x17,0x3b,0x3,0xd9,0x1c,0xe4,0xf,0xd9,0x40,0x20,0xf]
testHsfzMsg2 = dataMessage [0x40,0xf4,0x62,0x20,0x0,0x80,0x41,0x88,0xf,0x80,0x41,0xa6,0xf,0xd9,0x15,0xfe,0xf,0xd9,0x40,0x8,0xf]
testHsfzMsg3 = dataMessage[0x40,0xf4,0x59,0x2,0x4f,0x3,0x0,0xc,0x3,0x3,0x0,0xd,0x3,0x3,0x0,0xe,0x3,0x3,0x0,0xf,0x3,0x3,0x0,0x8c,0x3,0x3,0x0,0x8d,0xf,0x3,0x0,0x8e,0x3,0x3,0x0,0x8f,0xf,0x3,0x3,0x50,0xf,0x3,0x3,0x52,0x3,0x80,0x40,0x24,0xf,0x80,0x40,0x28,0xf,0x80,0x40,0x33,0x3,0x80,0x40,0x3b,0xf,0x80,0x40,0x86,0xf,0x80,0x40,0x87,0xf,0x80,0x40,0x88,0xf,0x80,0x40,0x9a,0xf,0x80,0x40,0x9b,0xf,0x80,0x40,0x9c,0xf,0x80,0x40,0xa7,0xf,0x80,0x40,0xac,0xf,0x80,0x40,0xf5,0xf,0x80,0x41,0x21,0xf,0x80,0x41,0x25,0xf,0x80,0x41,0x5b,0xf,0x80,0x41,0x64,0xf,0x80,0x41,0x66,0xf,0x80,0x41,0x68,0xf,0x80,0x41,0x6a,0xf,0x80,0x41,0x6d,0xf,0x80,0x41,0x78,0x3,0x80,0x41,0xe2,0xf,0x80,0x42,0x91,0x2,0x80,0x43,0x6e,0x3,0xd9,0xc,0x1,0xf,0xd9,0xc,0x4,0xf,0xd9,0xc,0x7,0xf,0xd9,0xc,0xa,0xf,0xd9,0xc,0xd,0xf,0xd9,0xc,0x10,0xf,0xd9,0xd,0x1,0xf,0xd9,0xd,0x7,0xf,0xd9,0xd,0xa,0xf,0xd9,0xd,0xd,0xf,0xd9,0xd,0x17,0xf,0xd9,0x14,0xa5,0xf,0xd9,0x15,0x99,0xf,0xd9,0x15,0x9b,0xf,0xd9,0x15,0x9f,0xf,0xd9,0x15,0xa1,0xf,0xd9,0x15,0xb9,0x3,0xd9,0x16,0x54,0xf,0xd9,0x16,0x81,0xf,0xd9,0x16,0xca,0x3,0xd9,0x16,0xe4,0x3,0xd9,0x17,0x1,0xf,0xd9,0x17,0x2,0xf,0xd9,0x17,0x28,0x3,0xd9,0x17,0x30,0x3,0xd9,0x17,0x42,0xf,0xd9,0x17,0x81,0x3,0xd9,0x17,0x93,0x3,0xd9,0x17,0xa7,0x3,0xd9,0x17,0xf9,0xf,0xd9,0x1c,0xe4,0xf,0xd9,0x1c,0xec,0x3,0xd9,0x1d,0xa1,0xf,0xd9,0x1e,0xbf,0xf,0xd9,0x1e,0xda,0x3,0xd9,0x1e,0xdf,0x3,0xd9,0x1f,0x44,0x3,0xd9,0x1f,0xf9,0xf]

testDiagMsg = hsfz2diag testHsfzMsg
testDiagMsg2 = hsfz2diag testHsfzMsg2
testDiagMsg3 = hsfz2diag testHsfzMsg3

test1 = mapM_ (interpretDtcs . return) [testDiagMsg, testDiagMsg2, testDiagMsg3]




